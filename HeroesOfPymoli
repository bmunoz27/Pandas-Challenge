# Dependencies and Setup
import pandas as pd

# File to Load (Remember to Change These)
file_to_load = "Resources/purchase_data.csv"

# Read Purchasing File and store into Pandas data frame
purchase_data = pd.read_csv(file_to_load)
purchase_data.head()

# only count unique values according to the Screen Name that way I dont get duplicates 
counting_players= purchase_data["SN"].nunique()
counting_players

#dataframe
total_players_df=pd.DataFrame({"Total Number of Players":[counting_players]})
total_players_df

# purchase_data.dtypes
# * Number of Unique Items
# * Average Purchase Price
# * Total Number of Purchases
# * Total Revenue

# define my variables to then use them in my df
unique_items= len(purchase_data['Item ID'].unique())
average_price= purchase_data['Price'].mean()
total_purchases= len(purchase_data['Price'])
total_revenue= purchase_data['Price'].sum()
total_revenue

#create dataframe 

purchasing_analysis_df=pd.DataFrame({"Number of Unique Items":[unique_items],
                                     "Average Price":[average_price],
                                     "Number of Purchases":[total_purchases],
                                     "Total Revenue":[total_revenue]})

purchasing_analysis_df.style.format({'Average Price':'${:,.2f}',
                                    'Total Revenue':'${:,.2f}'})
# * Percentage and Count of Male Players
# * Percentage and Count of Female Players
# # * Percentage and Count of Other / Non-Disclosed
# gender_count = purchase_data.groupby(['Gender'])



# groupby gender, use my previous Screen unique count to only account for players once
gender_counts_df = purchase_data.groupby('Gender')['SN'].nunique()

#  just divide X by Y and multiply the result by 100
gender_percentage=round(((gender_counts_df/counting_players) *100),2).astype(str) + '%'
# gender_percentage.format("{:.2%}")


# gender_percentage_df = gender_counts_df.groupby(level=0).apply(lambda x: 100 * x / float(x.sum()))


gender_demographics_df=pd.DataFrame({"Total Count":gender_counts_df,
                                     "Percentage of Players":gender_percentage})
# format_df=gender_demographics_df.styler({"Percentage of Players":"{:.2%}"}).format
gender_demographics_df.head()

# The below each broken by gender
#   * Purchase Count
#   * Average Purchase Price
#   * Total Purchase Value
#   * Average Purchase Total per Person by Gender

# variables
purchase_count_df= purchase_data.groupby(['Gender'])['Item Name'].count()
average_purchase_df= round(purchase_data.groupby(['Gender'])['Price'].mean(),2)
total_purchase_value=purchase_data.groupby(['Gender'])['Price'].sum()
# the total that all females/males bought divided by the number of females/males
average_total=round(total_purchase_value/gender_counts_df,2)

# dataframe
purchasing_gender_analysis_df=pd.DataFrame({"Purchase Count":purchase_count_df,
                                     "Average Purchase Price":average_purchase_df,
                                     "Total Purchase Value": total_purchase_value,
                                     "Avg Total Purchase per Person":average_total})

# format
purchasing_gender_analysis_df.style.format({'Average Purchase Price':'${:,.2f}',
                                            'Total Purchase Value':'${:,.2f}',
                                            'Avg Total Purchase per Person':'${:,.2f}'})

# * The below each broken into bins of 4 years (i.e. &lt;10, 10-14, 15-19, etc.)
#   * Purchase Count
#   * Average Purchase Price
#   * Total Purchase Value
#   * Average Purchase Total per Person by Age Group
# dividing everything into bins. right inclusive I think its the term- 10,15,20 not included
bins = [0,9,14,19,24,29,34,39, 100]
age_groups = ["<10", "10-14", "15-19", "20-24", "25-29","30-34","35-39","40+"]

pd.cut(purchase_data["Age"], bins, labels=age_groups).head
# creating a new row that will hold my data
purchase_data["Age Demo"] = pd.cut(purchase_data["Age"], bins, labels=age_groups)
# grouping that data
age_demo = purchase_data.groupby("Age Demo")

# creating my variables
total_count_age= age_demo["SN"].nunique()
percentage_players=round(((total_count_age/counting_players) *100),2).astype(str) + '%'



# dataframe
age_demographics_df=pd.DataFrame({"Total Count":total_count_age,
                                  "Percentage of Players":percentage_players})
age_demographics_df

# Bin the purchase_data data frame by age
# Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. in the table below
# Create a summary data frame to hold the results
# Optional: give the displayed data cleaner formatting
# Display the summary data frame

# variables
purchase_count_age= age_demo["Purchase ID"].count()

average_purchase_price= round((age_demo["Price"].mean()),2)
total_purchase_value_age = age_demo["Price"].sum()
# same as before except with age- total purchase of that age group divided by how many people are in that group
average_total_purchase= round((total_purchase_value_age/total_count_age),2)

purchasing_analysis_age=pd.DataFrame({
                                     "Purchase Count":purchase_count_age,
                                     "Average Purchase Price":average_purchase_price,
                                     "Total Purchase Value": total_purchase_value_age,
                                     "Avg Total Purchase per Person":average_total_purchase})

purchasing_analysis_age.style.format({'Average Purchase Price':'${:,.2f}',
                                      'Total Purchase Value':'${:,.2f}',
                                      'Avg Total Purchase per Person':'${:,.2f}'})


# pull data to analyse for top spenders-we need Screen name, Item name, Price
top_spenders=purchase_data[["SN","Item Name","Price"]]
# top_spenders.head()

# groupby using SN- so we can later organize by price and item number
top_spenders_SN=top_spenders.groupby(["SN"])

# variables
items_purchased=top_spenders_SN["Item Name"].count()
average_items_price=round(top_spenders_SN["Price"].mean(),2)
items_total_purchased=top_spenders_SN["Price"].sum()

# dataframe
top_spenders_data=pd.DataFrame({"Purchase Count":items_purchased,
                                "Average Purchase Price":average_items_price,
                                "Total Purchase Value": items_total_purchased})
# could't get to how to format and sort at the same time
top_spenders_data.style.format({'Average Purchase Price':'${:,.2f}',
                                  'Total Purchase Value':'${:,.2f}'})
# sorting my data by the Total Purchase Value 
top_spenders_sorted = top_spenders_data.sort_values(
    ["Total Purchase Value"], ascending=False)


top_spenders_data
top_spenders_sorted.head()

#  Identify the 5 most popular items by purchase count, then list (in a table):
#   * Item ID
#   * Item Name
#   * Purchase Count
#   * Item Price
#   * Total Purchase Value

most_popular_items=purchase_data[["Item ID","Item Name","Price"]]
# most_popular_items.head()

most_popular_grouped=most_popular_items.groupby(["Item ID","Item Name"])

items_purchased_count=most_popular_grouped["Item Name"].count()
item_total_purchase=most_popular_grouped["Price"].sum()
item_price=item_total_purchase/items_purchased_count

most_popular_items_data=pd.DataFrame({
                                      "Purchase Count":items_purchased_count,
                                      "Item Price":item_price,
                                      "Total Purchase Value": item_total_purchase})

most_popular_items_sorted = most_popular_items_data.sort_values(["Purchase Count"], ascending=False)
most_popular_items_sorted.head()

# Sort the above table by total purchase value in descending order
# Optional: give the displayed data cleaner formatting
# Display a preview of the data frame
most_popular_items_sorted = most_popular_items_data.sort_values(
    ["Total Purchase Value"], ascending=False)
most_popular_items_sorted.head()
